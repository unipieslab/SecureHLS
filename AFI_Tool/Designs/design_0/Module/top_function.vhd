-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_function is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    mask : IN STD_LOGIC_VECTOR (31 downto 0);
    iQ : IN STD_LOGIC_VECTOR (31 downto 0);
    ir : IN STD_LOGIC_VECTOR (31 downto 0);
    iT : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of top_function is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "top_function,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-ftg256-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.651750,HLS_SYN_LAT=36,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=316,HLS_SYN_LUT=595,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal A2X_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal A2X_ce0 : STD_LOGIC;
    signal A2X_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal X2S_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal X2S_ce0 : STD_LOGIC;
    signal X2S_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_186_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln132_fu_199_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln132_reg_335 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln135_fu_213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln135_reg_341 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_217_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_346 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_0_1_fu_233_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal y_0_2_fu_240_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln146_fu_247_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_G256_inv_fu_176_ap_ready : STD_LOGIC;
    signal grp_G256_inv_fu_176_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_1_fu_255_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln132_1_fu_268_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln132_1_reg_374 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln135_1_fu_282_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln135_1_reg_380 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_1_fu_286_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_385 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_0_4_fu_308_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal y_0_5_fu_315_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_G256_inv_fu_176_ap_start : STD_LOGIC;
    signal grp_G256_inv_fu_176_ap_idle : STD_LOGIC;
    signal grp_G256_inv_fu_176_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal y_0_0_i_reg_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_reg_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_reg_112 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_0_i_reg_123 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_0_0_i1_reg_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_2_reg_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i2_reg_156 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_0_i3_reg_167 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_G256_inv_fu_176_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln134_fu_194_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln134_2_fu_263_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln132_fu_182_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1_fu_203_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln134_1_fu_223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_0_fu_227_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln132_1_fu_251_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_272_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln134_3_fu_298_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_0_3_fu_302_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component G256_inv IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component top_function_A2X IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component top_function_X2S IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    A2X_U : component top_function_A2X
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A2X_address0,
        ce0 => A2X_ce0,
        q0 => A2X_q0);

    X2S_U : component top_function_X2S
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => X2S_address0,
        ce0 => X2S_ce0,
        q0 => X2S_q0);

    grp_G256_inv_fu_176 : component G256_inv
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_G256_inv_fu_176_ap_start,
        ap_done => grp_G256_inv_fu_176_ap_done,
        ap_idle => grp_G256_inv_fu_176_ap_idle,
        ap_ready => grp_G256_inv_fu_176_ap_ready,
        x => t_reg_100,
        ap_return => grp_G256_inv_fu_176_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_G256_inv_fu_176_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_G256_inv_fu_176_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_fu_186_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_G256_inv_fu_176_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_G256_inv_fu_176_ap_ready = ap_const_logic_1)) then 
                    grp_G256_inv_fu_176_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i2_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_0_i2_reg_156 <= i_1_reg_385;
            elsif (((grp_G256_inv_fu_176_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_0_i2_reg_156 <= ap_const_lv4_7;
            end if; 
        end if;
    end process;

    i_0_i_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_i_reg_112 <= i_reg_346;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_i_reg_112 <= ap_const_lv4_7;
            end if; 
        end if;
    end process;

    p_0_i3_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_0_i3_reg_167 <= sext_ln135_1_reg_380;
            elsif (((grp_G256_inv_fu_176_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_0_i3_reg_167 <= zext_ln146_fu_247_p1;
            end if; 
        end if;
    end process;

    p_0_i_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_0_i_reg_123 <= sext_ln135_reg_341;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0_i_reg_123 <= n;
            end if; 
        end if;
    end process;

    t_2_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                t_2_reg_144 <= y_0_5_fu_315_p3;
            elsif (((grp_G256_inv_fu_176_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                t_2_reg_144 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    t_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                t_reg_100 <= y_0_2_fu_240_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_reg_100 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    y_0_0_i1_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                y_0_0_i1_reg_132 <= y_0_4_fu_308_p3;
            elsif (((grp_G256_inv_fu_176_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                y_0_0_i1_reg_132 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    y_0_0_i_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                y_0_0_i_reg_88 <= y_0_1_fu_233_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                y_0_0_i_reg_88 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_255_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                i_1_reg_385 <= i_1_fu_286_p2;
                sext_ln135_1_reg_380 <= sext_ln135_1_fu_282_p1;
                trunc_ln132_1_reg_374 <= trunc_ln132_1_fu_268_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_186_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_346 <= i_fu_217_p2;
                sext_ln135_reg_341 <= sext_ln135_fu_213_p1;
                trunc_ln132_reg_335 <= trunc_ln132_fu_199_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_186_p3, ap_CS_fsm_state4, grp_G256_inv_fu_176_ap_done, ap_CS_fsm_state5, tmp_1_fu_255_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_186_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((grp_G256_inv_fu_176_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((tmp_1_fu_255_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    A2X_address0 <= zext_ln134_fu_194_p1(3 - 1 downto 0);

    A2X_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A2X_ce0 <= ap_const_logic_1;
        else 
            A2X_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X2S_address0 <= zext_ln134_2_fu_263_p1(3 - 1 downto 0);

    X2S_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            X2S_ce0 <= ap_const_logic_1;
        else 
            X2S_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_CS_fsm_state5, tmp_1_fu_255_p3)
    begin
        if (((tmp_1_fu_255_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, tmp_1_fu_255_p3)
    begin
        if (((tmp_1_fu_255_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= (t_2_reg_144 xor ap_const_lv32_63);
    grp_G256_inv_fu_176_ap_start <= grp_G256_inv_fu_176_ap_start_reg;
    i_1_fu_286_p2 <= std_logic_vector(signed(ap_const_lv4_F) + signed(i_0_i2_reg_156));
    i_fu_217_p2 <= std_logic_vector(signed(ap_const_lv4_F) + signed(i_0_i_reg_112));
        sext_ln132_1_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_0_i2_reg_156),32));

        sext_ln132_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_0_i_reg_112),32));

        sext_ln135_1_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_272_p4),31));

        sext_ln135_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_203_p4),32));

    tmp_1_fu_255_p3 <= i_0_i2_reg_156(3 downto 3);
    tmp_2_fu_272_p4 <= p_0_i3_reg_167(30 downto 1);
    tmp_fu_186_p3 <= i_0_i_reg_112(3 downto 3);
    trunc_ln132_1_fu_268_p1 <= p_0_i3_reg_167(1 - 1 downto 0);
    trunc_ln132_fu_199_p1 <= p_0_i_reg_123(1 - 1 downto 0);
    trunc_ln1_fu_203_p4 <= p_0_i_reg_123(31 downto 1);
    y_0_1_fu_233_p3 <= 
        y_0_fu_227_p2 when (trunc_ln132_reg_335(0) = '1') else 
        y_0_0_i_reg_88;
    y_0_2_fu_240_p3 <= 
        y_0_fu_227_p2 when (trunc_ln132_reg_335(0) = '1') else 
        t_reg_100;
    y_0_3_fu_302_p2 <= (zext_ln134_3_fu_298_p1 xor y_0_0_i1_reg_132);
    y_0_4_fu_308_p3 <= 
        y_0_3_fu_302_p2 when (trunc_ln132_1_reg_374(0) = '1') else 
        y_0_0_i1_reg_132;
    y_0_5_fu_315_p3 <= 
        y_0_3_fu_302_p2 when (trunc_ln132_1_reg_374(0) = '1') else 
        t_2_reg_144;
    y_0_fu_227_p2 <= (zext_ln134_1_fu_223_p1 xor y_0_0_i_reg_88);
    zext_ln134_1_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A2X_q0),32));
    zext_ln134_2_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln132_1_fu_251_p1),64));
    zext_ln134_3_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(X2S_q0),32));
    zext_ln134_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln132_fu_182_p1),64));
    zext_ln146_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_G256_inv_fu_176_ap_return),31));
end behav;
