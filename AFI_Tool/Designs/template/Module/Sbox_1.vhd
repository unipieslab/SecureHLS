-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Sbox_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of Sbox_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_63 : STD_LOGIC_VECTOR (7 downto 0) := "01100011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal A2X_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal A2X_1_ce0 : STD_LOGIC;
    signal A2X_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal X2S_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal X2S_1_ce0 : STD_LOGIC;
    signal X2S_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_154_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_167_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_279 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_fu_185_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln133_fu_201_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_G256_inv_1_fu_144_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_G256_inv_1_fu_144_ap_ready : STD_LOGIC;
    signal grp_G256_inv_1_fu_144_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_2_fu_209_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_222_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_307 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln269_fu_228_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_2_fu_246_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln133_1_fu_262_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_G256_inv_1_fu_144_ap_start : STD_LOGIC;
    signal grp_G256_inv_1_fu_144_ap_idle : STD_LOGIC;
    signal t_reg_78 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_i_reg_90 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_0_i_reg_101 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_4_reg_111 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_i2_reg_123 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_0_i3_reg_134 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_G256_inv_1_fu_144_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln132_fu_162_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln132_1_fu_217_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln130_fu_150_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln130_fu_173_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln131_fu_177_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_fu_191_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln130_1_fu_205_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln130_1_fu_234_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln131_1_fu_238_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_4_fu_252_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component G256_inv_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Sbox_2_A2X_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Sbox_2_X2S_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    A2X_1_U : component Sbox_2_A2X_2
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A2X_1_address0,
        ce0 => A2X_1_ce0,
        q0 => A2X_1_q0);

    X2S_1_U : component Sbox_2_X2S_2
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => X2S_1_address0,
        ce0 => X2S_1_ce0,
        q0 => X2S_1_q0);

    grp_G256_inv_1_fu_144 : component G256_inv_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_G256_inv_1_fu_144_ap_start,
        ap_done => grp_G256_inv_1_fu_144_ap_done,
        ap_idle => grp_G256_inv_1_fu_144_ap_idle,
        ap_ready => grp_G256_inv_1_fu_144_ap_ready,
        x => t_reg_78,
        ap_return => grp_G256_inv_1_fu_144_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_G256_inv_1_fu_144_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_G256_inv_1_fu_144_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_fu_154_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_G256_inv_1_fu_144_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_G256_inv_1_fu_144_ap_ready = ap_const_logic_1)) then 
                    grp_G256_inv_1_fu_144_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i2_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_0_i2_reg_123 <= i_2_reg_307;
            elsif (((grp_G256_inv_1_fu_144_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_0_i2_reg_123 <= ap_const_lv4_7;
            end if; 
        end if;
    end process;

    i_0_i_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_i_reg_90 <= i_reg_279;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_i_reg_90 <= ap_const_lv4_7;
            end if; 
        end if;
    end process;

    p_0_i3_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_0_i3_reg_134 <= zext_ln133_1_fu_262_p1;
            elsif (((grp_G256_inv_1_fu_144_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_0_i3_reg_134 <= grp_G256_inv_1_fu_144_ap_return;
            end if; 
        end if;
    end process;

    p_0_i_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_0_i_reg_101 <= zext_ln133_fu_201_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0_i_reg_101 <= input_r;
            end if; 
        end if;
    end process;

    t_4_reg_111_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                t_4_reg_111 <= y_2_fu_246_p2;
            elsif (((grp_G256_inv_1_fu_144_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                t_4_reg_111 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    t_reg_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                t_reg_78 <= y_fu_185_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_reg_78 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_209_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                ap_return <= xor_ln269_fu_228_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_209_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                i_2_reg_307 <= i_2_fu_222_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_154_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_279 <= i_fu_167_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_154_p3, ap_CS_fsm_state4, grp_G256_inv_1_fu_144_ap_done, ap_CS_fsm_state5, tmp_2_fu_209_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_154_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((grp_G256_inv_1_fu_144_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((tmp_2_fu_209_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    A2X_1_address0 <= zext_ln132_fu_162_p1(3 - 1 downto 0);

    A2X_1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A2X_1_ce0 <= ap_const_logic_1;
        else 
            A2X_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X2S_1_address0 <= zext_ln132_1_fu_217_p1(3 - 1 downto 0);

    X2S_1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            X2S_1_ce0 <= ap_const_logic_1;
        else 
            X2S_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_G256_inv_1_fu_144_ap_start <= grp_G256_inv_1_fu_144_ap_start_reg;
    i_2_fu_222_p2 <= std_logic_vector(signed(ap_const_lv4_F) + signed(i_0_i2_reg_123));
    i_fu_167_p2 <= std_logic_vector(signed(ap_const_lv4_F) + signed(i_0_i_reg_90));
    select_ln131_1_fu_238_p3 <= 
        X2S_1_q0 when (trunc_ln130_1_fu_234_p1(0) = '1') else 
        ap_const_lv8_0;
    select_ln131_fu_177_p3 <= 
        A2X_1_q0 when (trunc_ln130_fu_173_p1(0) = '1') else 
        ap_const_lv8_0;
        sext_ln130_1_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_0_i2_reg_123),32));

        sext_ln130_fu_150_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_0_i_reg_90),32));

    tmp_2_fu_209_p3 <= i_0_i2_reg_123(3 downto 3);
    tmp_fu_154_p3 <= i_0_i_reg_90(3 downto 3);
    trunc_ln130_1_fu_234_p1 <= p_0_i3_reg_134(1 - 1 downto 0);
    trunc_ln130_fu_173_p1 <= p_0_i_reg_101(1 - 1 downto 0);
    x_assign_4_fu_252_p4 <= p_0_i3_reg_134(7 downto 1);
    x_assign_fu_191_p4 <= p_0_i_reg_101(7 downto 1);
    xor_ln269_fu_228_p2 <= (t_4_reg_111 xor ap_const_lv8_63);
    y_2_fu_246_p2 <= (t_4_reg_111 xor select_ln131_1_fu_238_p3);
    y_fu_185_p2 <= (t_reg_78 xor select_ln131_fu_177_p3);
    zext_ln132_1_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln130_1_fu_205_p1),64));
    zext_ln132_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln130_fu_150_p1),64));
    zext_ln133_1_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_assign_4_fu_252_p4),8));
    zext_ln133_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_assign_fu_191_p4),8));
end behav;
